<Window x:Class="LightCutter.UI.Sample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:LightCutter.UI.Sample"
        xmlns:ui="clr-namespace:Net.Surviveplus.LightCutter.UI.Parts;assembly=LightCutter.UI"
        xmlns:u="clr-namespace:Net.Surviveplus.LightCutter.UI;assembly=LightCutter.UI"
        mc:Ignorable="d"
        Title="MainWindow" Height="550" Width="525" SizeChanged="Window_SizeChanged" MinWidth="250"
        Loaded="Window_Loaded"
        DataContext="{Binding Source={x:Static u:WindowsTheme.Current}}"
        >
    <Window.Style>
        <Style TargetType="Window">
            <Setter Property="Background" Value="White" />
            <Setter Property="Foreground" Value="Black" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding Theme}" Value="0">
                    <Setter Property="Background" Value="Black" />
                    <Setter Property="Foreground" Value="White" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Style>
    <Window.Resources>
        <Style TargetType="RadioButton">
            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=Foreground}" />
        </Style>
        <Style TargetType="CheckBox">
            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=Foreground}" />
        </Style>
        <Style TargetType="Button">
            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=Foreground}" />
            <Setter Property="Background" Value="#3DDDDDDD" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsDefaulted" Value="True">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <!--<Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>-->
                                <Setter Property="Background" TargetName="border" Value="#9F2e426a"/>
                                <Setter Property="Foreground" Value="White" />
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#2e426a"/>
                                <Setter Property="Foreground" Value="White" />
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                            </Trigger>
                            <Trigger Property="ToggleButton.IsChecked" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                                <Setter Property="Foreground" Value="#FF838383"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                </Setter.Value>
            </Setter>
        </Style>

    </Window.Resources>

    <Grid x:Name="mainGrid">
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="ApplicationViewStates">
                <VisualState x:Name="Full" />
                <VisualState x:Name="Small" >
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="wait">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                        </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>

            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
        <Grid.RowDefinitions>
            <RowDefinition Height="160"/>
            <RowDefinition Height="34"/>
            <RowDefinition Height="34"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <TextBlock Grid.Row="0" >
            <RadioButton GroupName="theme" Click="RadioButton_Click">Dark</RadioButton>
            <RadioButton GroupName="theme" Click="RadioButton_Click_1">Light</RadioButton>
            <LineBreak />
            <ui:Key>Esc</ui:Key> : Exit <LineBreak />
            <Button Height="40" Width="300" >
                <TextBlock>
                    <ui:Key>Ctrl</ui:Key> + <ui:Key>Shift</ui:Key> + <ui:Key>Alt</ui:Key> + <ui:Key>A</ui:Key> : Start capture.
                </TextBlock>
                </Button>
            <LineBreak />
            <ui:Mouse /> Mouse / 
            <ui:MouseRightClick /> Right Click /
            <ui:MouseLeftClick /> Left Click <LineBreak />
            <ui:Timer /> <TextBlock x:Name="wait" Visibility="Visible">Wait</TextBlock> 3s  > <ui:Screen /> <TextBlock Visibility="{Binding ElementName=wait, Path=Visibility}">Stop</TextBlock> Screen > <ui:Cutter /> <TextBlock Visibility="{Binding ElementName=wait, Path=Visibility}">Cut</TextBlock> > <ui:Save /> <TextBlock Visibility="{Binding ElementName=wait, Path=Visibility}">Save a File on</TextBlock> desktop

        </TextBlock>

        <ComboBox Grid.Row="1" x:Name="shortcutBox" TextSearch.TextPath="Caption">
            <ComboBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock xml:space ="preserve"><TextBlock Visibility="{Binding Win}"><ui:Key>Win</ui:Key> + </TextBlock><TextBlock Visibility="{Binding Ctrl}"><ui:Key>Ctrl</ui:Key> + </TextBlock><TextBlock Visibility="{Binding Shift}"><ui:Key>Shift</ui:Key> + </TextBlock><TextBlock Visibility="{Binding Alt}"><ui:Key>Alt</ui:Key> + </TextBlock><ui:Key><TextBlock Text="{Binding Key}" /></ui:Key></TextBlock>
                </DataTemplate>
            </ComboBox.ItemTemplate>
        </ComboBox>


        <ComboBox Grid.Row="2" x:Name="shortcutBox2" TextSearch.TextPath="Caption">
            <ComboBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock xml:space ="preserve"><TextBlock Visibility="{Binding Win}"><ui:Key>Win</ui:Key> + </TextBlock><TextBlock Visibility="{Binding Ctrl}"><ui:Key>Ctrl</ui:Key> + </TextBlock><TextBlock Visibility="{Binding Shift}"><ui:Key>Shift</ui:Key> + </TextBlock><TextBlock Visibility="{Binding Alt}"><ui:Key>Alt</ui:Key> + </TextBlock><ui:Key><TextBlock Text="{Binding Key}" /></ui:Key></TextBlock>
                </DataTemplate>
            </ComboBox.ItemTemplate>
        </ComboBox>

        <StackPanel  Grid.Row="3">
            <CheckBox Margin="10 10 10 10" Click="CheckBox_Click">Edit</CheckBox>
            <ui:ActionButton x:Name="action1" Loaded="Action1_Loaded" Click="Action1_Click" EditButtonClick="Action1_EditButtonClick">
                <TextBlock>
                    <ui:Screen /> Stop Screen &gt;
                    <ui:Cutter /> Cut &gt;
                    <ui:Save /> Save a File on desktop
                </TextBlock>
            </ui:ActionButton>
            <ui:ActionButton  x:Name="action2" EditButtonClick="Action1_EditButtonClick">
                <TextBlock>
                    <ui:Screen /> Stop Screen &gt;
                    <ui:Cutter /> Cut &gt;
                    <ui:Save /> Save a File on desktop
                </TextBlock>
            </ui:ActionButton>

            <ui:ActionButton  x:Name="action3" Click="Action3_Click" EditButtonClick="Action1_EditButtonClick">
                <TextBlock>
                            <ui:Screen />  Stop Screen &gt; <ui:LastArea /> Cut the same range &gt; <ui:Save /> Save a File on desktop</TextBlock>
            </ui:ActionButton>

        </StackPanel>
    </Grid>
</Window>
